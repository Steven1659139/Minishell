
[X] Afficher un prompt en l’attente d’une nouvelle commande.
[X] Historique fonctionnel
[X] chercher et lancer le bon exécutable (PATH environnement, absolu ou relatif)
[X] ne pas interprèter de quotes non fermés ou de caractère spéciaux non préciser comme \ ou ;
[X] gérer simple quotes
[X] gérer double quotes


[] redirections 
	[] Modifer fonction heredoc pour pipe au lieu de fichier.
	[X] << allo cat, ne reconnait pas le delimiter s'il y a un espace après
	[X] >> créer les fichiers en concervant les espaces
	[X] "< doit rediriger l'entrée"
	[X] > doit rediriger la sortie 
	[X] << doit recevoir un délimiteur et lire l’input donné jusqu’à rencontrer une ligne contenant le délimiteur. Cependant, l’historique n’a pas à être mis à jour !
	[X] >> doit rediriger la sortie en mode append.

[] execution
	[] 2 lignes de commands (1 builtin, 1 pipe, 1 command)
	[] 2 lignes de commands (1 commande, 1 pipe, 1 builtin)
	[] activer les signaux Ctrl+C et Ctrl + \ dans les childs (ai je le droit)
	[] Cas specifique a gerer 
		[] Gerer les path relatifs?
		[] Tous les FDS fermes dans parent (et aussi child?).
		[] gerer le cas  cat > test.txt | wc
	[X] Infile error : affichesur stderr durant letape execution (Nouvelle fonction: exec_error_manangement )
	[X] Cmd error : afficher sur stderr durant execiton (Nouvelle fonction: exec_error_manangement )
	[X] Fonction find_path_for command. Ajoute le fin que si la comande est deja un executable, le garder tel quel. 
	[X] 1 ligne de commande avec builtin (manque seulement que les builtin soient finis pour les tester)
	[X] 1 ligne de commande avec commande
	[X] Gerer les executables dont donne le path complet (ex: /bin/ls)
	[X] ./minishell |
	[X] Execution en simultaneeO (waitpid en dehors de la fonction create_child)

	FIXME: [X] les builtins sont exécutée puis renvoie l'erreur' command not found ex: bash: echo: command not found


[X] implémenter les pipes ( | )
[X] Gérer les variables d’environnement (un $ suivi d’une séquence de caractères) qui doivent être substituées par leur contenu.
[] Gérer $? qui doit être substitué par le statut de sortie de la dernière pipeline exécutée au premier plan.

[] signaux
	[] ctrl-C
	[] ctrl-D
	[] ctrl-\

FIXME:	
		[] ctrl-C double le prompt lorsque le programme hang

[] Builtins
	[] echo et "l'option -n"
		[] echo "" ''
		[X] gérer -n avec autre chose que juste n
		[X] gérer plusieurs -n 
		[X] gérer les cas de allo"allo""allo" fait: allo"allo""allo" devrait faire : alloalloallo
		[X] gérer "'" '"' dans écho
		[] gestion d'erreur'
	[X] cd uniquement avec un chemin relatif ou absolu
		[X]	cd ..
		[X]	cd invalid
		[X]	cd ...
		[X]	cd sans argument retour à la racine 
		[X] gestion d'erreur'
	[X] pwd sans aucune option
		[X] pas de pwd 
	[] export sans aucune option
		[X] export sans argument
		[X] gérer plusieurs args
		[X] pas de "="
		[X] var1, var111111111
		[X] vérifier si la variable existe déjà
		[X] gestion des erreurs
	[] unset sans aucune option
		[X] gérer plusieurs args
		[X] gérer les "="
		[X] sans argument
	[] env sans aucune option ni argument
		[] renvoyer une erreur s'il' il des arguments ?
		[] gestion d'erreur'
	[] exit sans aucune option
		[] errno
		[] gestion d'erreur'


[] gérer le $
	[] "$U'SE'R" doit supprimer $U	
	[] supprimer tous les $
	[] fix les cas de "$USER" "'$USER'" '$USER'
	
[] Heredocs
	[] Changer heredoc pour utiliser un pipe au lieu de fichier 
	[] Discussion avec plus de chevrons <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	[] heredoc ne fonctionne pas collé au delim. ex :cat <<delim
	[X] heredoc ferme si le delim se retrouve au debut de la ligne 
		ex:	$> cat << hello
			>	hello my name is
			$>
	[] heredoc ne fonctionne pas avec les fonctions execve

[] gérer le errno

Struct
	[X] char **environnement


TODO: 
		[] fonction update state baser sur deux flag D_quote et S_quote déterminant quoi faire avec le contenue d'une expansion
		[] fix l'espace de la destination de export
	
	
		

FIXME:
		[X] unset
		[X] trunc les espaces après
		[X] unset PATH fait segfault fill_cmd
		[] double le prompt quand ctrl-C lorsque que le minishell hang
		[X] gérer les quotes vides "" '' pense que les quotes ne sont pas fermés


LEAKS:
		-  1,024 bytes in 1 blocks are definitely lost in loss record 75 of 117
			    at 0x100178545: malloc (in /Users/slavoie/.brew/Cellar/valgrind/HEAD-6ff08b6/libexec/valgrind/vgpreload_memcheck-amd64-darwin.so)
			    by 0x100440AA7: __private_getcwd (in /usr/lib/system/libsystem_c.dylib)
			    by 0x100005651: init_info (init.c:37)
				by 0x100001C09: main (main.c:123)
		- Syscall param execve(envp) points to uninitialised byte(s)
			    at 0x10066241E: execve (in /usr/lib/system/libsystem_kernel.dylib)
			    by 0x1000030CA: exec_one_command (execution.c:145)
			    by 0x1000032AD: one_command_or_builtin (execution.c:165)
			    by 0x1000032F2: execution (execution.c:177)
			    by 0x100001D27: main (main.c:152)
			  Address 0x1008bdc40 is 320 bytes inside a block of size 321 alloc'd
			    at 0x100178545: malloc (in /Users/slavoie/.brew/Cellar/valgrind/HEAD-6ff08b6/libexec/valgrind/vgpreload_memcheck-amd64-darwin.so)
			    by 0x1000319A5: tabcpy (ft_tab.c:89)
			    by 0x10000566A: init_info (init.c:38)
			    by 0x100001C09: main (main.c:123)






Question: 
			- est-ce qu'on' laisse passé les args d'export' avec des espaces ex: "export allo = 12345"       Réponse: non 
 		
LOG:
	Steven	31 octobre:	- gérer les différents cas des pipes aves espaces
						- trunquer les espaces devant les commandes suivant les pipes
						- ne pas interprèter les pipes entre quotes
						- state machine 
						- ne pas interprèter les quotes non-fermés
						- fix cd ..
						- fix remove_quote
																										
	Steven 2 novembre:	- fix double free in reinit
						- revenir au début si les quotes ne sont pas fermés
	
	Steven 5 novembre: 	- set readline 
						- fix -n multiple -ndasfsgd -nnnnnnnn
						- fix commande avec suivis d'autre' caractère ex: echo123
						- plus de leaks dans la redirection pour le moment
						- cd ..
						- cd gestion d'erreur'
						- nouvelle façon de gérer pwd
						- fix unset pwd
						

	Steven 7 novembre:	- fix edge case pwd 
						- fix segfault unset sans argument
						- 

	Cesar 7 novembre 	- Gerer les absolute path dans la fonction find_path_of_command
						- Modif find_path_command pour eviter que builtin "echo" ou autre ne cherche son executable (ex: bin/echo);
						- Input redirection(1ere serie de commande) et output redirection (derniere serie de commande) fonctionnel. 
						- Creation fonction one_command_or_builtin (pour execution un seule command ou builtin)
						- Ajout initial_stdin et initial_stdin dans fonction init() et reinit();
						- Creation fonction, put_back_initial_std (pour remettre les stdin a leur etat initial)
						- Execution en simultanee (waitpid en dehors de la fonction create_child)

	Steven 8 novembre:	- fix export plusieurs argument
						- fix export sans "="
						- gestion d'erreur' export
						- fix unset sans argument 
						- unset avec plusieurs args
						- fix unset avec "=" 

	Cesar 8 novembre 	- Infile error: message d'erreur STDERR s'affiche lors de l'execution (ex : < te.txt cat | wc)
						- Refait les fonctions dans execution pour que ca soit plus lisible  

	Steven 9 novembre:	- fix quotes fermés quand elles sont vides ex: "" ou ''
						- fix echo "" et ''
						- fonction qui supprime les tokens vides
						- fix espaces et doubles chevrons ex: >>allo ou <<allo

	Cesar 9 novembre    - Modifier fonction heredoc pour un pipe.
						- Changer strncmp dans fonction redirection pour strncmp(<<, 3) et strncmp(< , 2)
						- Cas suivant fonctionne : < test.txt | wc   OU  << cat (Modification fonction create_execve_args_list)
	

	Cesar 10 novembre	- Modification des waitpid dans la fonction create_child
						- 

	Steven 11 novembre	- fix export 
						- fix command seule, manquait un waitpid
						- fix espaces après le delimiter des Heredocs
						- fix espaces après les noms de fichiers générer par >>

	Cesar 13 novembre   - Gestion du cas cat > test2.txt | wc  pour qu'il reagisse comme dans bash 
						- Gestion des de input redirection dans les lignes commandes autre que 1ere! 
						- Cleaner ma fonction find_execve_binary 
						- Ajout du fichier temporary.c qui contient des fonctions qui fonctionnaient avant qu'elle ne soit
						  epuree (Just in case!)

	Cesar 14 novembre   - Expansion non-existante (Ex: TRES) n'affiche rien et retourne le prompt
						- Message derreur lorsque redirection avec expansion non-existante (< TRES) (Ajout else if dans fonction exec_error_management)
						- Message derreur lorsque redirection avec fichier non-existante (ex: < te.txt) (Ajout else if dans fonction exec_error_management)
	
	Cesar 15 novembre   - Commande non-existante affiche exit code 127 
						- Incorrect input affiche code 1  
						- Rendu ma fonction execution plus courte pour respecter les 25 lignes  
						- Changer le nom de certains arguments dans ma strucuture t_command_line
							-Cmd_and _args = path 
							-Merge_path_cmd = argv 
							-function "execve_error_management" s'appele check_if_error


	Cesar 16 novembre   - Fix : mon message d'erreur command not found ne s'affiche plus.
						- Fix : Regler le cas echo Cesar > test2.txt | wc qui causait un command not found pour echo 
						- Fix : Regler le problemes des 2 minishell  Minishell> Minishell> lorsqu'on fait Ctrl+C
						  (Regler avec l'ajout de la fonction signal(SIGINT, &signal_child) dans la fonction execution.c 
						- Regler les codes d'erreurs des signaux (SIGINT et SIQUIT)
						- Regler probleme de command ' << Cesar ' seul. Il manquait une protection dans table_flip

	Cesar 17 novembre   - Fix: regler le probleme de ' cat /dev/urandom | head -3 '

test redirection:
					- <>		bash = bash: syntax error near unexpected token 'newline'
					- <\>		bash = bash: >: No such file or directory

test général:
				- vérifier comment se comporte le code lorsque l'on' unset une variables importantes, ex: PATH ou PWD
				- sleep(2) | sleep(2) | sleep(2)
				- dev/urandom


test echo:
			- echo <|>					bash = bash: syntax error near unexpected token '|'								
			- echo allo			OK
			- echo "allo" 		OK 
			- echo 'allo' 		OK
			- echo "'allo'" 	OK
			- echo '"allo"' 	OK
			- echo '"a"ll"o"' 	OK
			- echo '"a"ll"o"' 	OK
			- echo				
